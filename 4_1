#include <iostream>
#include <iomanip>
#include <sstream>
#include <vector>
using namespace std;

struct Node {
    string key;
    int count;
    Node* left;
    Node* right;
    Node(string k) : key(k), count(1), left(nullptr), right(nullptr) {}
};

void printTree(Node* root, int space) {
    const int INDENTATION = 5;
    if (root == nullptr) {
        return;
    }

    space += INDENTATION;

    printTree(root->right, space);
    cout << setw(space) << root->key << " : " << root->count << endl;
    printTree(root->left, space);
}

Node* insert(Node* root, string key) {
    if (root == nullptr) {
        return new Node(key);
    }

    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    } else {
        root->count++;
    }

    return root;
}

bool isNumber(const string& s) {
    try {
        stoi(s);
        return true;
    } catch (...) {
        return false;
    }
}

int countNumbers(Node* root) {
    if (root == nullptr) {
        return 0;
    }

    int leftNumbers = countNumbers(root->left);
    int rightNumbers = countNumbers(root->right);

    int currentNumbers = 0;

    // Проверяем, является ли ключ числом
    if (isNumber(root->key)) {
        currentNumbers++;
    }

    return leftNumbers + rightNumbers + currentNumbers;
}

int main() {
    Node* root = nullptr;
    string input;
    cout << "Введите символы и числа через пробел для добавления в дерево: ";
    getline(cin, input);

    stringstream ss(input);
    string token;
    vector<string> tokens;

    while (ss >> token) {
        tokens.push_back(token);
    }

    for (const string& token : tokens) {
        root = insert(root, token);
    }

    cout << "Дерево с корнем по центру и листьями вправо и вниз:" << endl;
    printTree(root, 0);

    int numberCount = countNumbers(root);
    cout << "Количество чисел в дереве: " << numberCount << endl;

    // Освобождение памяти после использования дерева
    // ...

    return 0;
}
